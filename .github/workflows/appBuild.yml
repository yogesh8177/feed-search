# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Superheroes Staging

on:
  push:
    branches: [ superheroes-staging ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ superheroes-staging ]
    paths-ignore:
      - '**.md'

jobs:
  build-web-server:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        #node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: |
        cd ./database && npm ci
        npm run build --if-present
        npm run coverage
    - run: |
        rm ./build.txt
        touch ./build.txt
        echo ${{ github.run_number }} > ./build.txt
        npm ci && npm run coverage
      env:
        NODE_ENV: github
        FIELD_INDEXES: id:number,name:string
        INVERTED_INDEXES: name
        DEFAULT_SORT_ORDER: asc

    - name: Build and push Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: yogesh8177/heroes-web-staging
        tags: ${{ github.run_number }}
        build_args: BUILD_VERSION=${{ github.run_number }}
        dockerfile: ./Dockerfile.prod

  build-voting-service:
    runs-on: ubuntu-latest
    container: node:12
    services: 
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            # Maps port 6379 on service container to the host
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - name: Build voting-service -node v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
          cd ./voting-service
          npm install
          npm start
        env:
          NODE_ENV: github
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          HOST: 0.0.0.0
          PORT: 3000

  
  build-ui:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
  
    steps:
      - uses: actions/checkout@v2
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
  
      - name: Run e2e
        run: docker-compose up --exit-code-from ui-e2e
        
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     repository: yogesh8177/heroes-ui-staging
      #     tags: ${{ github.run_number }}
      #     dockerfile: ./ui/Dockerfile.prod
  
  s3_deploy:
    runs-on: ubuntu-latest
    needs: ['build-ui', 'build-web-server', 'build-voting-service']
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Angular App
        run: |
            cd ./ui && npm install
            rm ./src/assets/build.txt
            touch ./src/assets/build.txt
            echo ${{ github.run_number }} > ./src/assets/build.txt
            npm run build:prod
            
        env:
          CI: ""
      - name: Deploy app build to S3 bucket
        run: aws s3 sync ./ui/dist/ui/ s3://heroes-search.ytechspark.com --delete

      

